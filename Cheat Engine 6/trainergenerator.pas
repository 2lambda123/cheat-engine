unit trainergenerator;

{$mode delphi}

interface

uses
  windows, Classes, SysUtils, FileUtil, LResources, Forms, Controls, Graphics,
  Dialogs, ceguicomponents, lclintf, StdCtrls, EditBtn, ExtCtrls, ExtDlgs,
  ExtraTrainerComponents, cefuncproc, HotkeyHandler, HotKeys, symbolhandler,
  luacaller, formdesignerunit, opensave, luafile, frmAdConfigUnit, cesupport,
  IconStuff;

type
  TTrainerForm=class(TCEForm)
    public
      defaultTrainer: boolean;
  end; //so it's uniquely identifyable

  { TfrmTrainerGenerator }
  TfrmTrainerGenerator = class(TForm)
    Button1: TButton;
    Button2: TButton;
    Button3: TButton;
    Button4: TButton;
    Button5: TButton;
    btnDesignForm: TButton;
    cbPopupOnKeypress: TCheckBox;
    cbSupportCheatEngine: TCheckBox;
    cbBeepOnAction: TCheckBox;
    cbCanResize: TCheckBox;
    cbProtect: TCheckBox;
    cbPlayXM: TCheckBox;
    cbStopPlaying: TCheckBox;
    comboProcesslist: TComboBox;
    edtPopupHotkey: TEdit;
    edtFreezeInterval: TEdit;
    fnXM: TFileNameEdit;
    GroupBox2: TGroupBox;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    mAbout: TMemo;
    OpenDialog1: TOpenDialog;
    OpenDialog2: TOpenDialog;
    OpenPictureDialog1: TOpenPictureDialog;
    rbStopWhenAttached: TRadioButton;
    rbStopWhenFocusLost: TRadioButton;
    SaveDialog1: TSaveDialog;
    SaveDialog2: TSaveDialog;
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure Button4Click(Sender: TObject);
    procedure Button5Click(Sender: TObject);
    procedure btnDesignFormClick(Sender: TObject);
    procedure cbCanResizeChange(Sender: TObject);
    procedure cbPlayXMChange(Sender: TObject);
    procedure cbStopPlayingChange(Sender: TObject);
    procedure cbSupportCheatEngineChange(Sender: TObject);
    procedure edtPopupHotkeyKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure FileNameEdit1Change(Sender: TObject);
    procedure FormClose(Sender: TObject; var CloseAction: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure RadioButton2Change(Sender: TObject);
  private
    { private declarations }
    popupkeys: TKeycombo;
    functions, init: TStringlist;
    restoretimer: ttimer;
    adconfig: TfrmAdConfig;

    procedure generateScript;
    procedure RestoreSupportCE(sender: tobject);
  public
    trainerform: TTrainerForm;
    extrapanel: TCEPanel;
    cheatpanel: TCEPanel;
    aboutbutton: TCEButton;
    image: TCEImage;
    closebutton: TCEButton;
    seperator: TCESplitter;

    hotkeylabel, descriptionlabel: tcelabel;
    { public declarations }

    canceled: boolean;
  end; 

var
  frmTrainerGenerator: TfrmTrainerGenerator;

implementation

uses mainunit, memoryrecordunit;

{ TfrmTrainerGenerator }

procedure TfrmTrainerGenerator.FormCreate(Sender: TObject);
var i,j: integer;
  f: TCEForm;

  mr: Tmemoryrecord;

  cheatnr: integer;
  currentcheat: tcheat;
  lastcheat: tcheat;
  r: integer;

  reusedWindow: boolean;
  fname: string;

  hotkeynamename, memrecname: string;
begin
  //fill in the processlist and select the currently opened process

  GetProcessList(comboProcesslist.Items, true);

  //find the current process in the processlist
  for i:=0 to comboProcesslist.Items.Count-1 do
    if PProcessListInfo(comboProcesslist.Items.Objects[i]).processID=processid then
    begin
      //found it
      comboProcesslist.ItemIndex:=i;
      break;
    end;


  functions:=tstringlist.create;
  init:=tstringlist.create;
  init.add('--Please note that this is an autogenerated trainer');
  init.add('--The reason the generated code is a bit bloated is because it doesn''t make');
  init.add('--use of memrec_onActive/onDeactive so it doesn''t interfere with user scripts');
  init.add('--And of course: It is autogenerated. Don''t expect too much of it');
  init.add('');
  init.add('--If you write your own script manually you can use as many shortcuts as you like');
  init.add('');
  init.add('addresslist=getAddressList()');


  //first check if there is already a trainerform
  reusedWindow:=false;
  for i:=0 to mainform.LuaForms.count-1 do
  begin
    if (TObject(mainform.luaforms[i]) is TTrainerform) then
    begin
      r:=messagedlg('There is already a trainer form defined. Do you want to reuse this window?', mtConfirmation, [mbyes,mbno,mbcancel],0);

      if r=mrCancel then
      begin
        canceled:=true;
        exit;
      end;

      if r=mryes then
      begin
        trainerform:=TTrainerForm(mainform.luaforms[i]);

        extrapanel:=TCEPanel(trainerform.FindComponent('EXTRAPANEL'));
        cheatpanel:=TCEPanel(trainerform.FindComponent('CHEATPANEL'));
        aboutbutton:=TCEButton(trainerform.FindComponent('ABOUTBUTTON'));
        image:=TCEImage(trainerform.FindComponent('IMAGE'));
        closebutton:=TCEButton(trainerform.FindComponent('CLOSEBUTTON'));
        seperator:=TCESplitter(trainerform.FindComponent('SEPERATOR'));

        if seperator<>nil then
          seperator.Enabled:=true; //in case the script disabled it

        reusedWindow:=true;
      end
      else
      begin
        TTrainerForm(mainform.luaforms[i]).free;
        mainform.LuaForms.Delete(i);
      end;

      break;
    end;
  end;



  if trainerform=nil then
  begin
    //create it
    trainerform:=TTrainerForm.CreateNew(nil);
    trainerform.AutoSize:=false;
    trainerform.defaultTrainer:=true;

    mainform.luaforms.add(trainerform);

    //now initialize the form to it's default
    trainerform.name:='CETrainer';
    trainerform.Position:=poScreenCenter;

    seperator:=TCESplitter.create(trainerform);
    seperator.Align:=alLeft;
    seperator.name:='SEPERATOR';
    seperator.parent:=trainerform;

    extrapanel:=Tcepanel.create(trainerform);
    extrapanel.align:=alleft;
    extrapanel.width:=100;
    extrapanel.name:='EXTRAPANEL';
    extrapanel.caption:='';
    extrapanel.bevelinner:=bvLowered;
    extrapanel.bevelouter:=bvLowered;
    extrapanel.parent:=trainerform;


    cheatpanel:=Tcepanel.create(trainerform);
    cheatpanel.align:=alclient;
    cheatpanel.name:='CHEATPANEL';
    cheatpanel.caption:='';
    cheatpanel.parent:=trainerform;




    hotkeylabel:=Tcelabel.create(trainerform);
    hotkeylabel.name:='HOTKEYLABEL';
    hotkeylabel.caption:='Hotkey';
    hotkeylabel.left:=10;
    hotkeylabel.top:=10;
    hotkeylabel.parent:=cheatpanel;

    descriptionlabel:=Tcelabel.create(trainerform);
    descriptionlabel.name:='DESCRIPTIONLABEL';
    descriptionlabel.caption:='Effect';
    descriptionlabel.left:=100;
    descriptionlabel.top:=hotkeylabel.top;
    descriptionlabel.parent:=cheatpanel;


    aboutbutton:=TCEButton.create(trainerform);
    aboutbutton.name:='ABOUTBUTTON';
    aboutbutton.caption:='About';
    aboutbutton.align:=albottom;
    aboutbutton.Parent:=extrapanel;
    with TLuaCaller.create do
    begin
      luaroutine:='AboutClick';
      aboutbutton.onclick:=NotifyEvent;
    end;


    image:=TCEImage.create(trainerform);
    image.name:='IMAGE';
    image.align:=alclient;
    image.stretch:=true;
    image.parent:=extrapanel;

    closebutton:=TCEButton.create(trainerform);
    closebutton.name:='CLOSEBUTTON';
    closebutton.caption:='Close';
    closebutton.top:=cheatpanel.clientheight - closebutton.height-8;
    closebutton.left:=cheatpanel.clientwidth div 2 - closebutton.width div 2;
    closebutton.parent:=cheatpanel;

    closebutton.anchors:=[akBottom];

    with TLuaCaller.create do
    begin
      luaroutine:='CloseClick';
      closebutton.onclick:=NotifyEvent;
    end;
  end;


  if seperator<>nil then
    init.Add('control_setVisible('+trainerform.name+'_SEPERATOR, false)');


  if (cheatpanel<>nil) and ((not reusedWindow) or (MessageDlg('Do you want to refill the cheat list?', mtconfirmation, [mbyes, mbno],0)=mryes)) then
  begin
    //whipe out the old cheats
    while cheatpanel.ComponentCount>0 do
      cheatpanel.Components[0].free;

    //configure it based on the current addresslist
    cheatnr:=0;
    lastcheat:=nil;
    for i:=0 to mainform.addresslist.Count-1 do
    begin
      mr:=mainform.addresslist.MemRecItems[i];

      if mr.hasHotkeys then
      begin
        memrecname:='memrec'+inttostr(mr.id);
        init.add(memrecname+'=addresslist_getMemoryRecordByID(addresslist,'+inttostr(mr.id)+')');
      end;

      //add the hotkeys (could be multiple)

      for j:=0 to mr.Hotkeycount-1 do
      begin
        //add it
        hotkeynamename:=memrecname+'_hotkey'+inttostr(mr.hotkey[j].id);
        init.add(hotkeynamename+'=memoryrecord_getHotkeyByID('+memrecname+','+inttostr(mr.hotkey[j].id)+')');

        currentcheat:=tcheat.create(trainerform);
        currentcheat.parent:=cheatpanel;
        currentcheat.name:='CHEAT'+inttostr(cheatnr);

        if lastcheat=nil then
        begin
          currentcheat.left:=10;
          currentcheat.top:=40;
        end
        else
        begin
          currentcheat.top:=lastcheat.Top+lastcheat.height+10;
          currentcheat.left:=lastcheat.left;
        end;

        currentcheat.hotkeyleft:=hotkeylabel.left-currentcheat.left;
        currentcheat.descriptionleft:=descriptionlabel.left-currentcheat.left;

        currentcheat.width:=cheatpanel.clientwidth-currentcheat.Left;
        currentcheat.anchors:=currentcheat.anchors+[akRight];

        currentcheat.Hotkey:=ConvertKeyComboToString(mr.hotkey[j].keys);
        if mr.hotkey[j].description='' then
        begin
          //try to guess that it does
          case mr.hotkey[j].action of
            mrhToggleActivation: currentcheat.description:='(De)active '+mr.description;
            mrhToggleActivationAllowIncrease: currentcheat.description:='(Un)Freeze '+mr.description+' but allow increase';
            mrhToggleActivationAllowDecrease: currentcheat.description:='(Un)Freeze '+mr.description+' but allow decrease';
            mrhSetValue: currentcheat.description:='Set '+mr.description+' to '+mr.hotkey[j].value;
            mrhIncreaseValue: currentcheat.description:='Increase '+mr.description+' by '+mr.hotkey[j].value;
            mrhDecreaseValue: currentcheat.description:='Decrease '+mr.description+' by '+mr.hotkey[j].value;
            else
              currentcheat.description:='Do something with '+mr.description;
          end;
        end
        else
          currentcheat.Description:=mr.hotkey[j].description;




        case mr.hotkey[j].action of
          mrhToggleActivation,
          mrhToggleActivationAllowIncrease,
          mrhToggleActivationAllowDecrease:
          begin
            //constantly enabled
            fname:='afterHotkey'+inttostr(cheatnr);
            functions.Add('function '+fname+'(Hotkey)');
            functions.add('--executed after the "toggle*" cheat got executed so');
            functions.add('  local memrec=memoryrecordhotkey_getOwner(Hotkey)');
            functions.add('  local isActive=memoryrecord_isActive(memrec'+inttostr(mr.id)+') --get the state after the hotkey got triggered');
            functions.add('  cheatcomponent_setActive('+trainerform.name+'_CHEAT'+inttostr(cheatnr)+', isActive)');
            functions.add('  if gBeepOnAction then');
            functions.add('    beep()');
            functions.add('  end');
            functions.add('end');
            functions.add('');


            init.add('memoryrecordhotkey_afterHotkey('+hotkeynamename+','+fname+')');
          end;

          else
          begin
            //one time only
            fname:='onHotkey'+inttostr(cheatnr);
            functions.Add('function '+fname+'(Hotkey)');
            functions.add('  cheatcomponent_setActive(CHEAT'+inttostr(cheatnr)+', isActive, 1500)');
            functions.add('  if gBeepOnAction then');
            functions.add('    beep()');
            functions.add('  end');
            functions.add('end');
            functions.add('');

            init.add('memoryrecordhotkey_afterHotkey('+hotkeynamename+','+fname+')');
          end;


        end;

        lastcheat:=currentcheat;
        inc(cheatnr);

      end;
    end;

    if cheatnr=0 then
      showmessage('The current cheat table has no hotkeys assigned. Only cheat entries with hotkeys assigned will be used');
  end;

end;

procedure TfrmTrainerGenerator.RadioButton2Change(Sender: TObject);
begin

end;

procedure TfrmTrainerGenerator.FormClose(Sender: TObject;
  var CloseAction: TCloseAction);
begin
  cleanProcessList(comboProcesslist.items);

  functions.free;
  init.free;
  closeaction:=cafree;
  frmTrainerGenerator:=nil;
end;

procedure TfrmTrainerGenerator.Button4Click(Sender: TObject);
begin
  generateScript;

  //find the trainermaker header in the lua script
    //and erase it


  if SaveDialog2.Execute then
    savetable(savedialog2.FileName, true);




end;

procedure TfrmTrainerGenerator.Button3Click(Sender: TObject);
begin
  zeromemory(@popupkeys,sizeof(TKeyCombo));
  edtPopupHotkey.Text:=ConvertKeyComboToString(popupkeys);
  edtPopupHotkey.SetFocus;
end;





procedure TfrmTrainerGenerator.Button1Click(Sender: TObject);
var hi: HICON;
  i: integer;


  nextpos: integer;
  maxheight: integer;
  p: TImage;

//  iconlist: array of Hicon;

  z: Ticon;

  e: THandle;
  hr: THandle;

  r: pointer;
  aaa: TFPResourceHMODULE;
  wee: HGlobal;

  rs: TResourceStream;

  size: integer;

  modulehandle: THandle;

  m: tmemorystream;
begin
  trainerform.icon:=pickIcon;


end;

procedure TfrmTrainerGenerator.Button2Click(Sender: TObject);
begin
  if openpicturedialog1.execute then
    image.Picture.LoadFromFile(openpicturedialog1.FileName);
end;

procedure TfrmTrainerGenerator.generateScript;
var generated: tstringlist;
  start,stop: integer;
  i: integer;
  l: tstrings;

  keyparams: string;

  f: TMemorystream;
  s: string;
begin
  trainerform.active:=false;
  trainerform.SaveCurrentStateasDesign;


  //add to the script routine an auto attach registration
  if comboprocesslist.text<>'' then
    comboProcesslist.text
  else
    raise exception.create('Please select/type in a processname');

  //erase the --TRAINERGENERATOR part of the luascript
  l:=mainform.frmLuaTableScript.assemblescreen.Lines;
  start:=l.IndexOf('--TRAINERGENERATORSTART--');
  stop:=l.IndexOf('--TRAINERGENERATORSTOP--');

  if ((start=-1) or (stop=-1)) and (start<>stop) then
    raise exception.create('The current lua script only has a half TRAINERGENERATORSTART/TRAINERGENERATORSTOP block. Please fix this first (Removing is the easiest option)');

  if start<>-1 then
    for i:=start to stop do
      l.Delete(start);

  //now write
  l.add('--TRAINERGENERATORSTART--');
  try
    l.AddStrings(functions);
    l.add('');
    l.AddStrings(init);
    l.add('strings_add(getAutoAttachList(), "'+comboProcesslist.text+'")');


    if (cbPopupOnKeypress.checked) and (edtPopupHotkey.text<>'') then
    begin
      l.add('function popupTrainerHotkeyFunction()');
      l.add('  form_show('+trainerform.Name+')');
      l.add('end');


      keyparams:='';
      for i:=0 to length(popupkeys)-1 do
      begin
        if popupkeys[i]=0 then break;
        keyparams:=keyparams+inttostr(popupkeys[i])+',';
      end;

      if keyparams<>'' then
        keyparams:=copy(keyparams, 1,length(keyparams)-1);

      l.add('registerHotkey(popupTrainerHotkeyFunction, '+keyparams+')');
      l.add('timer_setInterval(getFreezeTimer(),'+edtFreezeInterval.text+')');

      if cbBeepOnAction.checked then
        l.add('gBeepOnAction=true')
      else
        l.add('gBeepOnAction=false');
    end;


    l.add('form_show('+trainerform.Name+')');

    if mAbout.lines.count>0 then
    begin
      l.add('function AboutClick()');
      l.add('  showMessage(gAboutText)');
      l.add('end');

      if mabout.lines.Count>0 then
        s:=mAbout.lines[0]
      else
        s:='';

      l.add('gAboutText=[['+s);

      for i:=1 to mabout.lines.Count-1 do
      begin
        if i<mabout.lines.Count-1 then
          l.add(mAbout.lines[i])
        else
          l.add(mAbout.lines[i]+']]');
      end;

      l.add('');
    end;


    l.add('function CloseClick()');
    l.add('  closeCE()');
    l.add('end');
    l.add('');


    if cbPlayXM.checked then
    begin
      f:=TMemoryStream.Create;
      f.LoadFromFile(fnXM.FileName);
      //check if there is already a TRAINERXM file
      //if so, delete

      for i:=0 to mainform.LuaFiles.count-1 do
        if TLuafile(mainform.LuaFiles[i]).name='TRAINERXM' then
        begin
          TLuafile(mainform.LuaFiles[i]).free;
          mainform.LuaFiles.Delete(i);
          break;
        end;

      mainform.LuaFiles.add(TLuafile.create('TRAINERXM',f));
      f.free;

      l.add('');
      l.add('XMFILE=findTableFile(''TRAINERXM'')');
      l.add('xmplayer_playXM(XMFILE)');
      l.add('');

      if rbStopWhenAttached.checked then
      begin
        l.add('function onOpenProcess(processid)');
        l.add('  xmplayer_stop()');
        l.add('end');
      end
      else
      begin
        l.add('function focusCheck(sender)');
        l.add('  if (form_isForegrounwindow('+trainerform.Name+')) then');
        l.add('    if (xmplayer_isPlaying()==false) then');
        l.add('      xmplayer_resume()');
        l.add('    end');
        l.add('  else');
        l.add('    if (xmplayer_isPlaying()) then');
        l.add('      xmplayer_pause()');
        l.add('    end');
        l.add('  end');
        l.add('end');

        l.add('');
        l.add('focusTimer=createTimer()');
        l.add('timer_onTimer(focuscheck)');
        l.add('timer_setInterval(focustimer, 250)');
      end;


    end;

    if not cbSupportCheatEngine.checked then
    begin
      if adconfig<>nil then
      begin
        l.add('supportCheatEngine('+trainerform.name+','+BoolToStr(adconfig.cbCanClose.checked,'true','false')+','+adconfig.edtWidth.text+','+adconfig.edtHeight.text+','+inttostr(adconfig.adposition)+', '+adconfig.ownurl+','+adconfig.extraparam+','+inttostr(adconfig.percentage)+')');
        l.add('--Thank you from Dark Byte--');
      end;
    end;

  finally
    l.add('--TRAINERGENERATORSTOP--');
  end;
end;

procedure TfrmTrainerGenerator.Button5Click(Sender: TObject);
begin
  generateScript;
  if SaveDialog1.Execute then
    savetable(savedialog1.FileName, true);
end;

procedure TfrmTrainerGenerator.btnDesignFormClick(Sender: TObject);
begin
  mainform.createFormdesigner;

  formdesigner.designForm(trainerform);
  formdesigner.show;

  trainerform.show;
end;

procedure TfrmTrainerGenerator.cbCanResizeChange(Sender: TObject);
begin
  if cbCanResize.checked then
    trainerform.BorderStyle:=bsSizeable
  else
    trainerform.BorderStyle:=bsSingle;
end;

procedure TfrmTrainerGenerator.cbPlayXMChange(Sender: TObject);
begin
  fnXM.enabled:=cbPlayXM.checked;
  cbStopPlaying.enabled:=cbPlayXM.checked;
  rbStopWhenAttached.enabled:=cbPlayXM.checked and cbStopPlaying.checked;
  rbStopWhenFocusLost.enabled:=cbPlayXM.checked and cbStopPlaying.checked;

end;

procedure TfrmTrainerGenerator.cbStopPlayingChange(Sender: TObject);
begin
  rbStopWhenAttached.enabled:=cbPlayXM.checked and cbStopPlaying.checked;
  rbStopWhenFocusLost.enabled:=cbPlayXM.checked and cbStopPlaying.checked;
end;

procedure TfrmTrainerGenerator.RestoreSupportCE(sender: tobject);
begin
  cbSupportCheatEngine.caption:='Don''t support Cheat Engine';
  if restoretimer<>nil then
    restoretimer.enabled:=false;
end;

procedure TfrmTrainerGenerator.cbSupportCheatEngineChange(Sender: TObject);
begin
  //Guilt procedure
  if not cbSupportCheatEngine.checked then
  begin
    cbSupportCheatEngine.caption:='Thank you! :)';
    //show the ad config window

    if adwindow=nil then
       adwindow:=TADWindow.CreateNew(trainerform, true);

    adwindow.Width:=468;
    adwindow.height:=60;
    adwindow.show;
    adwindow.AttachToForm(trainerform);
    adwindow.setPosition(akBottom);




    if adconfig=nil then
      adconfig:=TfrmAdConfig.create(self);

    if left>adconfig.width then
      adconfig.left:=left-adconfig.width-20
    else
      adconfig.top:=top+height;

    adconfig.show;

    adwindow.optional:='designer=1';
    adwindow.LoadAd;

  end
  else
    cbSupportCheatEngine.caption:='aaaaw :(';


  if restoretimer=nil then
  begin
    restoretimer:=TTimer.create(self);
    restoretimer.ontimer:=RestoreSupportCE;
    restoretimer.interval:=1500;
  end;

  restoretimer.enabled:=true;
end;

procedure TfrmTrainerGenerator.edtPopupHotkeyKeyDown(Sender: TObject;
  var Key: Word; Shift: TShiftState);
var i: integer;
begin
  if popupkeys[4]=0 then
  begin
    for i:=0 to 4 do
      if popupkeys[i]=0 then
      begin
        popupkeys[i]:=key;
        break;
      end else
      if popupkeys[i]=key then break;
  end;

  edtPopupHotkey.Text:=ConvertKeyComboToString(popupkeys);

  key:=0;
end;

procedure TfrmTrainerGenerator.FileNameEdit1Change(Sender: TObject);
begin

end;

initialization
  RegisterClass(TTrainerForm);

  {$I trainergenerator.lrs}

end.

